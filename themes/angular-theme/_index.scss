@forward './lib/core/style/spacing';
@use 'sass:map';
@use '@angular/material' as mat;
@use '@finastra/fds-tokens/dist/scss/light';
@use '@finastra/fds-tokens/dist/scss/dark';

$primary-light-palette: (
  100: map.get(light.$tokens, primary),
  500: map.get(light.$tokens, primary),
  700: map.get(light.$tokens, primary),
  contrast: (
    100: map.get(light.$tokens, on-primary),
    500: map.get(light.$tokens, on-primary),
    700: map.get(light.$tokens, on-primary),
  )
);

$primary-dark-palette: (
  100: map.get(dark.$tokens, primary),
  500: map.get(dark.$tokens, primary),
  700: map.get(dark.$tokens, primary),
  contrast: (
    100: map.get(dark.$tokens, on-primary),
    500: map.get(dark.$tokens, on-primary),
    700: map.get(dark.$tokens, on-primary),
  )
);

@include mat.core();

// Define a dark theme
$dark-theme: mat.define-dark-theme((
 color: (
   primary: mat.define-palette($primary-dark-palette),
   accent: mat.define-palette(mat.$blue-grey-palette),
 ),
  // Only include `typography` and `density` in the default dark theme.
  typography: mat.define-typography-config(),
  density: 0,
));

// Define a light theme
$light-theme: mat.define-light-theme((
 color: (
    primary: mat.define-palette($primary-light-palette),
   accent: mat.define-palette(mat.$pink-palette),
 ),
));

// Apply the light theme by default
@include mat.all-component-themes($light-theme);

// Apply the dark theme only when the user prefers dark themes.
@media (prefers-color-scheme: dark) {
  // Use the `-color` mixins to only apply color styles without reapplying the same
  // typography and density styles.
  @include mat.all-component-colors($dark-theme);
}